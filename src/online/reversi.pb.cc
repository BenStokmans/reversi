// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reversi.proto

#include "reversi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace reversi {
PROTOBUF_CONSTEXPR Heartbeat::Heartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
PROTOBUF_CONSTEXPR Connected::Connected(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConnectedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConnectedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConnectedDefaultTypeInternal() {}
  union {
    Connected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConnectedDefaultTypeInternal _Connected_default_instance_;
PROTOBUF_CONSTEXPR CreateGame::CreateGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateGameDefaultTypeInternal() {}
  union {
    CreateGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateGameDefaultTypeInternal _CreateGame_default_instance_;
PROTOBUF_CONSTEXPR CreateGameResponse::CreateGameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateGameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateGameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateGameResponseDefaultTypeInternal() {}
  union {
    CreateGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateGameResponseDefaultTypeInternal _CreateGameResponse_default_instance_;
PROTOBUF_CONSTEXPR JoinGame::JoinGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JoinGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinGameDefaultTypeInternal() {}
  union {
    JoinGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinGameDefaultTypeInternal _JoinGame_default_instance_;
PROTOBUF_CONSTEXPR JoinGameResponse::JoinGameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_id_)*/int64_t{0}
  , /*decltype(_impl_.color_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JoinGameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JoinGameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JoinGameResponseDefaultTypeInternal() {}
  union {
    JoinGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JoinGameResponseDefaultTypeInternal _JoinGameResponse_default_instance_;
PROTOBUF_CONSTEXPR LeaveGame::LeaveGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_id_)*/int64_t{0}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LeaveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveGameDefaultTypeInternal() {}
  union {
    LeaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveGameDefaultTypeInternal _LeaveGame_default_instance_;
PROTOBUF_CONSTEXPR GameMove::GameMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_id_)*/int64_t{0}
  , /*decltype(_impl_.player_id_)*/int64_t{0}
  , /*decltype(_impl_.x_)*/0u
  , /*decltype(_impl_.y_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameMoveDefaultTypeInternal() {}
  union {
    GameMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameMoveDefaultTypeInternal _GameMove_default_instance_;
PROTOBUF_CONSTEXPR GameMoveResponse::GameMoveResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_id_)*/int64_t{0}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameMoveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameMoveResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameMoveResponseDefaultTypeInternal() {}
  union {
    GameMoveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameMoveResponseDefaultTypeInternal _GameMoveResponse_default_instance_;
PROTOBUF_CONSTEXPR GameEnded::GameEnded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.special_reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.game_id_)*/int64_t{0}
  , /*decltype(_impl_.winner_)*/0} {}
struct GameEndedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameEndedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameEndedDefaultTypeInternal() {}
  union {
    GameEnded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameEndedDefaultTypeInternal _GameEnded_default_instance_;
}  // namespace reversi
static ::_pb::Metadata file_level_metadata_reversi_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_reversi_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_reversi_2eproto = nullptr;

const uint32_t TableStruct_reversi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reversi::Heartbeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::Heartbeat, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reversi::Connected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::Connected, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reversi::CreateGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::CreateGame, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::reversi::CreateGame, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reversi::CreateGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::CreateGameResponse, _impl_.game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reversi::JoinGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::JoinGame, _impl_.player_name_),
  PROTOBUF_FIELD_OFFSET(::reversi::JoinGame, _impl_.game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reversi::JoinGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::JoinGameResponse, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::reversi::JoinGameResponse, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reversi::LeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::LeaveGame, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::reversi::LeaveGame, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reversi::GameMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::GameMove, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::reversi::GameMove, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::reversi::GameMove, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::reversi::GameMove, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::reversi::GameMoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::GameMoveResponse, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::reversi::GameMoveResponse, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::reversi::GameMoveResponse, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::reversi::GameEnded, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::reversi::GameEnded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::reversi::GameEnded, _impl_.game_id_),
  PROTOBUF_FIELD_OFFSET(::reversi::GameEnded, _impl_.winner_),
  PROTOBUF_FIELD_OFFSET(::reversi::GameEnded, _impl_.special_reason_),
  ~0u,
  ~0u,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::reversi::Heartbeat)},
  { 7, -1, -1, sizeof(::reversi::Connected)},
  { 14, -1, -1, sizeof(::reversi::CreateGame)},
  { 22, -1, -1, sizeof(::reversi::CreateGameResponse)},
  { 29, -1, -1, sizeof(::reversi::JoinGame)},
  { 37, -1, -1, sizeof(::reversi::JoinGameResponse)},
  { 45, -1, -1, sizeof(::reversi::LeaveGame)},
  { 53, -1, -1, sizeof(::reversi::GameMove)},
  { 63, -1, -1, sizeof(::reversi::GameMoveResponse)},
  { 72, 81, -1, sizeof(::reversi::GameEnded)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::reversi::_Heartbeat_default_instance_._instance,
  &::reversi::_Connected_default_instance_._instance,
  &::reversi::_CreateGame_default_instance_._instance,
  &::reversi::_CreateGameResponse_default_instance_._instance,
  &::reversi::_JoinGame_default_instance_._instance,
  &::reversi::_JoinGameResponse_default_instance_._instance,
  &::reversi::_LeaveGame_default_instance_._instance,
  &::reversi::_GameMove_default_instance_._instance,
  &::reversi::_GameMoveResponse_default_instance_._instance,
  &::reversi::_GameEnded_default_instance_._instance,
};

const char descriptor_table_protodef_reversi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rreversi.proto\022\007reversi\"\036\n\tHeartbeat\022\021\n"
  "\tplayer_id\030\001 \001(\003\"\036\n\tConnected\022\021\n\tplayer_"
  "id\030\001 \001(\003\"@\n\nCreateGame\022\023\n\013player_name\030\001 "
  "\001(\t\022\035\n\005color\030\002 \001(\0162\016.reversi.Color\"%\n\022Cr"
  "eateGameResponse\022\017\n\007game_id\030\001 \001(\003\"0\n\010Joi"
  "nGame\022\023\n\013player_name\030\001 \001(\t\022\017\n\007game_id\030\002 "
  "\001(\003\"B\n\020JoinGameResponse\022\017\n\007game_id\030\001 \001(\003"
  "\022\035\n\005color\030\002 \001(\0162\016.reversi.Color\"/\n\tLeave"
  "Game\022\017\n\007game_id\030\001 \001(\003\022\021\n\tplayer_id\030\002 \001(\003"
  "\"D\n\010GameMove\022\017\n\007game_id\030\001 \001(\003\022\021\n\tplayer_"
  "id\030\002 \001(\003\022\t\n\001x\030\003 \001(\r\022\t\n\001y\030\004 \001(\r\"C\n\020GameMo"
  "veResponse\022\017\n\007game_id\030\001 \001(\003\022\017\n\007success\030\002"
  " \001(\010\022\r\n\005error\030\003 \001(\t\"l\n\tGameEnded\022\017\n\007game"
  "_id\030\001 \001(\003\022\036\n\006winner\030\002 \001(\0162\016.reversi.Colo"
  "r\022\033\n\016special_reason\030\003 \001(\tH\000\210\001\001B\021\n\017_speci"
  "al_reason*)\n\005Color\022\n\n\006RANDOM\020\000\022\t\n\005BLACK\020"
  "\001\022\t\n\005WHITE\020\002B\033Z\031../reversi-server/packet"
  "sb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_reversi_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_reversi_2eproto = {
    false, false, 689, descriptor_table_protodef_reversi_2eproto,
    "reversi.proto",
    &descriptor_table_reversi_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_reversi_2eproto::offsets,
    file_level_metadata_reversi_2eproto, file_level_enum_descriptors_reversi_2eproto,
    file_level_service_descriptors_reversi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_reversi_2eproto_getter() {
  return &descriptor_table_reversi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_reversi_2eproto(&descriptor_table_reversi_2eproto);
namespace reversi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_reversi_2eproto);
  return file_level_enum_descriptors_reversi_2eproto[0];
}
bool Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Heartbeat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:reversi.Heartbeat)
}

inline void Heartbeat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:reversi.Heartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Heartbeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Heartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.Heartbeat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Heartbeat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.Heartbeat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.Heartbeat)
  return target;
}

size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.Heartbeat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Heartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Heartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Heartbeat::GetClassData() const { return &_class_data_; }


void Heartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Heartbeat*>(&to_msg);
  auto& from = static_cast<const Heartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.Heartbeat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[0]);
}

// ===================================================================

class Connected::_Internal {
 public:
};

Connected::Connected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.Connected)
}
Connected::Connected(const Connected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Connected* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:reversi.Connected)
}

inline void Connected::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Connected::~Connected() {
  // @@protoc_insertion_point(destructor:reversi.Connected)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Connected::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Connected::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Connected::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.Connected)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Connected::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Connected::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.Connected)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.Connected)
  return target;
}

size_t Connected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.Connected)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Connected::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Connected::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Connected::GetClassData() const { return &_class_data_; }


void Connected::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Connected*>(&to_msg);
  auto& from = static_cast<const Connected&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.Connected)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Connected::CopyFrom(const Connected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.Connected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Connected::IsInitialized() const {
  return true;
}

void Connected::InternalSwap(Connected* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Connected::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[1]);
}

// ===================================================================

class CreateGame::_Internal {
 public:
};

CreateGame::CreateGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.CreateGame)
}
CreateGame::CreateGame(const CreateGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.color_ = from._impl_.color_;
  // @@protoc_insertion_point(copy_constructor:reversi.CreateGame)
}

inline void CreateGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.color_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateGame::~CreateGame() {
  // @@protoc_insertion_point(destructor:reversi.CreateGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void CreateGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateGame::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.CreateGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_name_.ClearToEmpty();
  _impl_.color_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "reversi.CreateGame.player_name"));
        } else
          goto handle_unusual;
        continue;
      // .reversi.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::reversi::Color>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.CreateGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reversi.CreateGame.player_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_name(), target);
  }

  // .reversi.Color color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.CreateGame)
  return target;
}

size_t CreateGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.CreateGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // .reversi.Color color = 2;
  if (this->_internal_color() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGame::GetClassData() const { return &_class_data_; }


void CreateGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateGame*>(&to_msg);
  auto& from = static_cast<const CreateGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.CreateGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGame::CopyFrom(const CreateGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.CreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGame::IsInitialized() const {
  return true;
}

void CreateGame::InternalSwap(CreateGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  swap(_impl_.color_, other->_impl_.color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[2]);
}

// ===================================================================

class CreateGameResponse::_Internal {
 public:
};

CreateGameResponse::CreateGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.CreateGameResponse)
}
CreateGameResponse::CreateGameResponse(const CreateGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateGameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.game_id_ = from._impl_.game_id_;
  // @@protoc_insertion_point(copy_constructor:reversi.CreateGameResponse)
}

inline void CreateGameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateGameResponse::~CreateGameResponse() {
  // @@protoc_insertion_point(destructor:reversi.CreateGameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateGameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.CreateGameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateGameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateGameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.CreateGameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.CreateGameResponse)
  return target;
}

size_t CreateGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.CreateGameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_game_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateGameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateGameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateGameResponse::GetClassData() const { return &_class_data_; }


void CreateGameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateGameResponse*>(&to_msg);
  auto& from = static_cast<const CreateGameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.CreateGameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateGameResponse::CopyFrom(const CreateGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.CreateGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGameResponse::IsInitialized() const {
  return true;
}

void CreateGameResponse::InternalSwap(CreateGameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_id_, other->_impl_.game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateGameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[3]);
}

// ===================================================================

class JoinGame::_Internal {
 public:
};

JoinGame::JoinGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.JoinGame)
}
JoinGame::JoinGame(const JoinGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.game_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_player_name().empty()) {
    _this->_impl_.player_name_.Set(from._internal_player_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.game_id_ = from._impl_.game_id_;
  // @@protoc_insertion_point(copy_constructor:reversi.JoinGame)
}

inline void JoinGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_name_){}
    , decltype(_impl_.game_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.player_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.player_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JoinGame::~JoinGame() {
  // @@protoc_insertion_point(destructor:reversi.JoinGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.player_name_.Destroy();
}

void JoinGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.JoinGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_name_.ClearToEmpty();
  _impl_.game_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string player_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_player_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "reversi.JoinGame.player_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.JoinGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_player_name().data(), static_cast<int>(this->_internal_player_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reversi.JoinGame.player_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_player_name(), target);
  }

  // int64 game_id = 2;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.JoinGame)
  return target;
}

size_t JoinGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.JoinGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_name = 1;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_player_name());
  }

  // int64 game_id = 2;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_game_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGame::GetClassData() const { return &_class_data_; }


void JoinGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinGame*>(&to_msg);
  auto& from = static_cast<const JoinGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.JoinGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGame::CopyFrom(const JoinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.JoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGame::IsInitialized() const {
  return true;
}

void JoinGame::InternalSwap(JoinGame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.player_name_, lhs_arena,
      &other->_impl_.player_name_, rhs_arena
  );
  swap(_impl_.game_id_, other->_impl_.game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[4]);
}

// ===================================================================

class JoinGameResponse::_Internal {
 public:
};

JoinGameResponse::JoinGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.JoinGameResponse)
}
JoinGameResponse::JoinGameResponse(const JoinGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JoinGameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){}
    , decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_id_, &from._impl_.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.color_) -
    reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.color_));
  // @@protoc_insertion_point(copy_constructor:reversi.JoinGameResponse)
}

inline void JoinGameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){int64_t{0}}
    , decltype(_impl_.color_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JoinGameResponse::~JoinGameResponse() {
  // @@protoc_insertion_point(destructor:reversi.JoinGameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JoinGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoinGameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JoinGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.JoinGameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.color_) -
      reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.color_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .reversi.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_color(static_cast<::reversi::Color>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JoinGameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.JoinGameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_game_id(), target);
  }

  // .reversi.Color color = 2;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.JoinGameResponse)
  return target;
}

size_t JoinGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.JoinGameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_game_id());
  }

  // .reversi.Color color = 2;
  if (this->_internal_color() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoinGameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JoinGameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoinGameResponse::GetClassData() const { return &_class_data_; }


void JoinGameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JoinGameResponse*>(&to_msg);
  auto& from = static_cast<const JoinGameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.JoinGameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (from._internal_color() != 0) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoinGameResponse::CopyFrom(const JoinGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.JoinGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameResponse::IsInitialized() const {
  return true;
}

void JoinGameResponse::InternalSwap(JoinGameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGameResponse, _impl_.color_)
      + sizeof(JoinGameResponse::_impl_.color_)
      - PROTOBUF_FIELD_OFFSET(JoinGameResponse, _impl_.game_id_)>(
          reinterpret_cast<char*>(&_impl_.game_id_),
          reinterpret_cast<char*>(&other->_impl_.game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[5]);
}

// ===================================================================

class LeaveGame::_Internal {
 public:
};

LeaveGame::LeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.LeaveGame)
}
LeaveGame::LeaveGame(const LeaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LeaveGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_id_, &from._impl_.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:reversi.LeaveGame)
}

inline void LeaveGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){int64_t{0}}
    , decltype(_impl_.player_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LeaveGame::~LeaveGame() {
  // @@protoc_insertion_point(destructor:reversi.LeaveGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaveGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.LeaveGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.player_id_) -
      reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaveGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LeaveGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.LeaveGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_game_id(), target);
  }

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.LeaveGame)
  return target;
}

size_t LeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.LeaveGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_game_id());
  }

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LeaveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LeaveGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LeaveGame::GetClassData() const { return &_class_data_; }


void LeaveGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LeaveGame*>(&to_msg);
  auto& from = static_cast<const LeaveGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.LeaveGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LeaveGame::CopyFrom(const LeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.LeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveGame::IsInitialized() const {
  return true;
}

void LeaveGame::InternalSwap(LeaveGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaveGame, _impl_.player_id_)
      + sizeof(LeaveGame::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(LeaveGame, _impl_.game_id_)>(
          reinterpret_cast<char*>(&_impl_.game_id_),
          reinterpret_cast<char*>(&other->_impl_.game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[6]);
}

// ===================================================================

class GameMove::_Internal {
 public:
};

GameMove::GameMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.GameMove)
}
GameMove::GameMove(const GameMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.game_id_, &from._impl_.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:reversi.GameMove)
}

inline void GameMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_id_){int64_t{0}}
    , decltype(_impl_.player_id_){int64_t{0}}
    , decltype(_impl_.x_){0u}
    , decltype(_impl_.y_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameMove::~GameMove() {
  // @@protoc_insertion_point(destructor:reversi.GameMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameMove::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.GameMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.GameMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_game_id(), target);
  }

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_id(), target);
  }

  // uint32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_x(), target);
  }

  // uint32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.GameMove)
  return target;
}

size_t GameMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.GameMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_game_id());
  }

  // int64 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
  }

  // uint32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_x());
  }

  // uint32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameMove::GetClassData() const { return &_class_data_; }


void GameMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameMove*>(&to_msg);
  auto& from = static_cast<const GameMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.GameMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameMove::CopyFrom(const GameMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.GameMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMove::IsInitialized() const {
  return true;
}

void GameMove::InternalSwap(GameMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMove, _impl_.y_)
      + sizeof(GameMove::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(GameMove, _impl_.game_id_)>(
          reinterpret_cast<char*>(&_impl_.game_id_),
          reinterpret_cast<char*>(&other->_impl_.game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[7]);
}

// ===================================================================

class GameMoveResponse::_Internal {
 public:
};

GameMoveResponse::GameMoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.GameMoveResponse)
}
GameMoveResponse::GameMoveResponse(const GameMoveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameMoveResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.game_id_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.game_id_, &from._impl_.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:reversi.GameMoveResponse)
}

inline void GameMoveResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.game_id_){int64_t{0}}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameMoveResponse::~GameMoveResponse() {
  // @@protoc_insertion_point(destructor:reversi.GameMoveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameMoveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void GameMoveResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameMoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.GameMoveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  ::memset(&_impl_.game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMoveResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "reversi.GameMoveResponse.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameMoveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.GameMoveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_game_id(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // string error = 3;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reversi.GameMoveResponse.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.GameMoveResponse)
  return target;
}

size_t GameMoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.GameMoveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 3;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_game_id());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameMoveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameMoveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameMoveResponse::GetClassData() const { return &_class_data_; }


void GameMoveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameMoveResponse*>(&to_msg);
  auto& from = static_cast<const GameMoveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.GameMoveResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameMoveResponse::CopyFrom(const GameMoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.GameMoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMoveResponse::IsInitialized() const {
  return true;
}

void GameMoveResponse::InternalSwap(GameMoveResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMoveResponse, _impl_.success_)
      + sizeof(GameMoveResponse::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(GameMoveResponse, _impl_.game_id_)>(
          reinterpret_cast<char*>(&_impl_.game_id_),
          reinterpret_cast<char*>(&other->_impl_.game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMoveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[8]);
}

// ===================================================================

class GameEnded::_Internal {
 public:
  using HasBits = decltype(std::declval<GameEnded>()._impl_._has_bits_);
  static void set_has_special_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GameEnded::GameEnded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:reversi.GameEnded)
}
GameEnded::GameEnded(const GameEnded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameEnded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.special_reason_){}
    , decltype(_impl_.game_id_){}
    , decltype(_impl_.winner_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.special_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.special_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_special_reason()) {
    _this->_impl_.special_reason_.Set(from._internal_special_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.game_id_, &from._impl_.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.winner_) -
    reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.winner_));
  // @@protoc_insertion_point(copy_constructor:reversi.GameEnded)
}

inline void GameEnded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.special_reason_){}
    , decltype(_impl_.game_id_){int64_t{0}}
    , decltype(_impl_.winner_){0}
  };
  _impl_.special_reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.special_reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GameEnded::~GameEnded() {
  // @@protoc_insertion_point(destructor:reversi.GameEnded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameEnded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.special_reason_.Destroy();
}

void GameEnded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameEnded::Clear() {
// @@protoc_insertion_point(message_clear_start:reversi.GameEnded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.special_reason_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.winner_) -
      reinterpret_cast<char*>(&_impl_.game_id_)) + sizeof(_impl_.winner_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameEnded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .reversi.Color winner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_winner(static_cast<::reversi::Color>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string special_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_special_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "reversi.GameEnded.special_reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameEnded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reversi.GameEnded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_game_id(), target);
  }

  // .reversi.Color winner = 2;
  if (this->_internal_winner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_winner(), target);
  }

  // optional string special_reason = 3;
  if (_internal_has_special_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_special_reason().data(), static_cast<int>(this->_internal_special_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "reversi.GameEnded.special_reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_special_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reversi.GameEnded)
  return target;
}

size_t GameEnded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reversi.GameEnded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string special_reason = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_special_reason());
  }

  // int64 game_id = 1;
  if (this->_internal_game_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_game_id());
  }

  // .reversi.Color winner = 2;
  if (this->_internal_winner() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_winner());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameEnded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameEnded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameEnded::GetClassData() const { return &_class_data_; }


void GameEnded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameEnded*>(&to_msg);
  auto& from = static_cast<const GameEnded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:reversi.GameEnded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_special_reason()) {
    _this->_internal_set_special_reason(from._internal_special_reason());
  }
  if (from._internal_game_id() != 0) {
    _this->_internal_set_game_id(from._internal_game_id());
  }
  if (from._internal_winner() != 0) {
    _this->_internal_set_winner(from._internal_winner());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameEnded::CopyFrom(const GameEnded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reversi.GameEnded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEnded::IsInitialized() const {
  return true;
}

void GameEnded::InternalSwap(GameEnded* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.special_reason_, lhs_arena,
      &other->_impl_.special_reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameEnded, _impl_.winner_)
      + sizeof(GameEnded::_impl_.winner_)
      - PROTOBUF_FIELD_OFFSET(GameEnded, _impl_.game_id_)>(
          reinterpret_cast<char*>(&_impl_.game_id_),
          reinterpret_cast<char*>(&other->_impl_.game_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameEnded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_reversi_2eproto_getter, &descriptor_table_reversi_2eproto_once,
      file_level_metadata_reversi_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace reversi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reversi::Heartbeat*
Arena::CreateMaybeMessage< ::reversi::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::Heartbeat >(arena);
}
template<> PROTOBUF_NOINLINE ::reversi::Connected*
Arena::CreateMaybeMessage< ::reversi::Connected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::Connected >(arena);
}
template<> PROTOBUF_NOINLINE ::reversi::CreateGame*
Arena::CreateMaybeMessage< ::reversi::CreateGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::CreateGame >(arena);
}
template<> PROTOBUF_NOINLINE ::reversi::CreateGameResponse*
Arena::CreateMaybeMessage< ::reversi::CreateGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::CreateGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::reversi::JoinGame*
Arena::CreateMaybeMessage< ::reversi::JoinGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::JoinGame >(arena);
}
template<> PROTOBUF_NOINLINE ::reversi::JoinGameResponse*
Arena::CreateMaybeMessage< ::reversi::JoinGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::JoinGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::reversi::LeaveGame*
Arena::CreateMaybeMessage< ::reversi::LeaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::LeaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::reversi::GameMove*
Arena::CreateMaybeMessage< ::reversi::GameMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::GameMove >(arena);
}
template<> PROTOBUF_NOINLINE ::reversi::GameMoveResponse*
Arena::CreateMaybeMessage< ::reversi::GameMoveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::GameMoveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::reversi::GameEnded*
Arena::CreateMaybeMessage< ::reversi::GameEnded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reversi::GameEnded >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

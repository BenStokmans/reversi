// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: reversi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_reversi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_reversi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_reversi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_reversi_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_reversi_2eproto;
namespace reversi {
class Connected;
struct ConnectedDefaultTypeInternal;
extern ConnectedDefaultTypeInternal _Connected_default_instance_;
class CreateGame;
struct CreateGameDefaultTypeInternal;
extern CreateGameDefaultTypeInternal _CreateGame_default_instance_;
class CreateGameResponse;
struct CreateGameResponseDefaultTypeInternal;
extern CreateGameResponseDefaultTypeInternal _CreateGameResponse_default_instance_;
class GameEnded;
struct GameEndedDefaultTypeInternal;
extern GameEndedDefaultTypeInternal _GameEnded_default_instance_;
class GameMove;
struct GameMoveDefaultTypeInternal;
extern GameMoveDefaultTypeInternal _GameMove_default_instance_;
class GameMoveResponse;
struct GameMoveResponseDefaultTypeInternal;
extern GameMoveResponseDefaultTypeInternal _GameMoveResponse_default_instance_;
class Heartbeat;
struct HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
class JoinGame;
struct JoinGameDefaultTypeInternal;
extern JoinGameDefaultTypeInternal _JoinGame_default_instance_;
class JoinGameResponse;
struct JoinGameResponseDefaultTypeInternal;
extern JoinGameResponseDefaultTypeInternal _JoinGameResponse_default_instance_;
class LeaveGame;
struct LeaveGameDefaultTypeInternal;
extern LeaveGameDefaultTypeInternal _LeaveGame_default_instance_;
}  // namespace reversi
PROTOBUF_NAMESPACE_OPEN
template<> ::reversi::Connected* Arena::CreateMaybeMessage<::reversi::Connected>(Arena*);
template<> ::reversi::CreateGame* Arena::CreateMaybeMessage<::reversi::CreateGame>(Arena*);
template<> ::reversi::CreateGameResponse* Arena::CreateMaybeMessage<::reversi::CreateGameResponse>(Arena*);
template<> ::reversi::GameEnded* Arena::CreateMaybeMessage<::reversi::GameEnded>(Arena*);
template<> ::reversi::GameMove* Arena::CreateMaybeMessage<::reversi::GameMove>(Arena*);
template<> ::reversi::GameMoveResponse* Arena::CreateMaybeMessage<::reversi::GameMoveResponse>(Arena*);
template<> ::reversi::Heartbeat* Arena::CreateMaybeMessage<::reversi::Heartbeat>(Arena*);
template<> ::reversi::JoinGame* Arena::CreateMaybeMessage<::reversi::JoinGame>(Arena*);
template<> ::reversi::JoinGameResponse* Arena::CreateMaybeMessage<::reversi::JoinGameResponse>(Arena*);
template<> ::reversi::LeaveGame* Arena::CreateMaybeMessage<::reversi::LeaveGame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace reversi {

enum Color : int {
  RANDOM = 0,
  BLACK = 1,
  WHITE = 2,
  Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Color_IsValid(int value);
constexpr Color Color_MIN = RANDOM;
constexpr Color Color_MAX = WHITE;
constexpr int Color_ARRAYSIZE = Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor();
template<typename T>
inline const std::string& Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Color_descriptor(), enum_t_value);
}
inline bool Color_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Color>(
    Color_descriptor(), name, value);
}
// ===================================================================

class Heartbeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.Heartbeat) */ {
 public:
  inline Heartbeat() : Heartbeat(nullptr) {}
  ~Heartbeat() override;
  explicit PROTOBUF_CONSTEXPR Heartbeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Heartbeat(const Heartbeat& from);
  Heartbeat(Heartbeat&& from) noexcept
    : Heartbeat() {
    *this = ::std::move(from);
  }

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline Heartbeat& operator=(Heartbeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Heartbeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Heartbeat& a, Heartbeat& b) {
    a.Swap(&b);
  }
  inline void Swap(Heartbeat* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Heartbeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Heartbeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Heartbeat>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Heartbeat& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Heartbeat& from) {
    Heartbeat::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Heartbeat* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.Heartbeat";
  }
  protected:
  explicit Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int64 player_id = 1;
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.Heartbeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// -------------------------------------------------------------------

class Connected final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.Connected) */ {
 public:
  inline Connected() : Connected(nullptr) {}
  ~Connected() override;
  explicit PROTOBUF_CONSTEXPR Connected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Connected(const Connected& from);
  Connected(Connected&& from) noexcept
    : Connected() {
    *this = ::std::move(from);
  }

  inline Connected& operator=(const Connected& from) {
    CopyFrom(from);
    return *this;
  }
  inline Connected& operator=(Connected&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Connected& default_instance() {
    return *internal_default_instance();
  }
  static inline const Connected* internal_default_instance() {
    return reinterpret_cast<const Connected*>(
               &_Connected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Connected& a, Connected& b) {
    a.Swap(&b);
  }
  inline void Swap(Connected* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Connected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Connected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Connected>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Connected& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Connected& from) {
    Connected::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Connected* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.Connected";
  }
  protected:
  explicit Connected(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int64 player_id = 1;
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.Connected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// -------------------------------------------------------------------

class CreateGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.CreateGame) */ {
 public:
  inline CreateGame() : CreateGame(nullptr) {}
  ~CreateGame() override;
  explicit PROTOBUF_CONSTEXPR CreateGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGame(const CreateGame& from);
  CreateGame(CreateGame&& from) noexcept
    : CreateGame() {
    *this = ::std::move(from);
  }

  inline CreateGame& operator=(const CreateGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGame& operator=(CreateGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGame* internal_default_instance() {
    return reinterpret_cast<const CreateGame*>(
               &_CreateGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateGame& a, CreateGame& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGame& from) {
    CreateGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.CreateGame";
  }
  protected:
  explicit CreateGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // string player_name = 1;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // .reversi.Color color = 2;
  void clear_color();
  ::reversi::Color color() const;
  void set_color(::reversi::Color value);
  private:
  ::reversi::Color _internal_color() const;
  void _internal_set_color(::reversi::Color value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.CreateGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    int color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// -------------------------------------------------------------------

class CreateGameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.CreateGameResponse) */ {
 public:
  inline CreateGameResponse() : CreateGameResponse(nullptr) {}
  ~CreateGameResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateGameResponse(const CreateGameResponse& from);
  CreateGameResponse(CreateGameResponse&& from) noexcept
    : CreateGameResponse() {
    *this = ::std::move(from);
  }

  inline CreateGameResponse& operator=(const CreateGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateGameResponse& operator=(CreateGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateGameResponse* internal_default_instance() {
    return reinterpret_cast<const CreateGameResponse*>(
               &_CreateGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateGameResponse& a, CreateGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateGameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateGameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateGameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateGameResponse& from) {
    CreateGameResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateGameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.CreateGameResponse";
  }
  protected:
  explicit CreateGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // int64 game_id = 1;
  void clear_game_id();
  int64_t game_id() const;
  void set_game_id(int64_t value);
  private:
  int64_t _internal_game_id() const;
  void _internal_set_game_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.CreateGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t game_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// -------------------------------------------------------------------

class JoinGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.JoinGame) */ {
 public:
  inline JoinGame() : JoinGame(nullptr) {}
  ~JoinGame() override;
  explicit PROTOBUF_CONSTEXPR JoinGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGame(const JoinGame& from);
  JoinGame(JoinGame&& from) noexcept
    : JoinGame() {
    *this = ::std::move(from);
  }

  inline JoinGame& operator=(const JoinGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGame& operator=(JoinGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGame* internal_default_instance() {
    return reinterpret_cast<const JoinGame*>(
               &_JoinGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JoinGame& a, JoinGame& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinGame& from) {
    JoinGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.JoinGame";
  }
  protected:
  explicit JoinGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerNameFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // string player_name = 1;
  void clear_player_name();
  const std::string& player_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_name();
  PROTOBUF_NODISCARD std::string* release_player_name();
  void set_allocated_player_name(std::string* player_name);
  private:
  const std::string& _internal_player_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_name(const std::string& value);
  std::string* _internal_mutable_player_name();
  public:

  // int64 game_id = 2;
  void clear_game_id();
  int64_t game_id() const;
  void set_game_id(int64_t value);
  private:
  int64_t _internal_game_id() const;
  void _internal_set_game_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.JoinGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_name_;
    int64_t game_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// -------------------------------------------------------------------

class JoinGameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.JoinGameResponse) */ {
 public:
  inline JoinGameResponse() : JoinGameResponse(nullptr) {}
  ~JoinGameResponse() override;
  explicit PROTOBUF_CONSTEXPR JoinGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGameResponse(const JoinGameResponse& from);
  JoinGameResponse(JoinGameResponse&& from) noexcept
    : JoinGameResponse() {
    *this = ::std::move(from);
  }

  inline JoinGameResponse& operator=(const JoinGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGameResponse& operator=(JoinGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGameResponse* internal_default_instance() {
    return reinterpret_cast<const JoinGameResponse*>(
               &_JoinGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JoinGameResponse& a, JoinGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinGameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinGameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinGameResponse& from) {
    JoinGameResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.JoinGameResponse";
  }
  protected:
  explicit JoinGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // int64 game_id = 1;
  void clear_game_id();
  int64_t game_id() const;
  void set_game_id(int64_t value);
  private:
  int64_t _internal_game_id() const;
  void _internal_set_game_id(int64_t value);
  public:

  // .reversi.Color color = 2;
  void clear_color();
  ::reversi::Color color() const;
  void set_color(::reversi::Color value);
  private:
  ::reversi::Color _internal_color() const;
  void _internal_set_color(::reversi::Color value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.JoinGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t game_id_;
    int color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// -------------------------------------------------------------------

class LeaveGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.LeaveGame) */ {
 public:
  inline LeaveGame() : LeaveGame(nullptr) {}
  ~LeaveGame() override;
  explicit PROTOBUF_CONSTEXPR LeaveGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveGame(const LeaveGame& from);
  LeaveGame(LeaveGame&& from) noexcept
    : LeaveGame() {
    *this = ::std::move(from);
  }

  inline LeaveGame& operator=(const LeaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveGame& operator=(LeaveGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LeaveGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveGame* internal_default_instance() {
    return reinterpret_cast<const LeaveGame*>(
               &_LeaveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LeaveGame& a, LeaveGame& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LeaveGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LeaveGame& from) {
    LeaveGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.LeaveGame";
  }
  protected:
  explicit LeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
  };
  // int64 game_id = 1;
  void clear_game_id();
  int64_t game_id() const;
  void set_game_id(int64_t value);
  private:
  int64_t _internal_game_id() const;
  void _internal_set_game_id(int64_t value);
  public:

  // int64 player_id = 2;
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.LeaveGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t game_id_;
    int64_t player_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// -------------------------------------------------------------------

class GameMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.GameMove) */ {
 public:
  inline GameMove() : GameMove(nullptr) {}
  ~GameMove() override;
  explicit PROTOBUF_CONSTEXPR GameMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameMove(const GameMove& from);
  GameMove(GameMove&& from) noexcept
    : GameMove() {
    *this = ::std::move(from);
  }

  inline GameMove& operator=(const GameMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameMove& operator=(GameMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameMove* internal_default_instance() {
    return reinterpret_cast<const GameMove*>(
               &_GameMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GameMove& a, GameMove& b) {
    a.Swap(&b);
  }
  inline void Swap(GameMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameMove& from) {
    GameMove::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.GameMove";
  }
  protected:
  explicit GameMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // int64 game_id = 1;
  void clear_game_id();
  int64_t game_id() const;
  void set_game_id(int64_t value);
  private:
  int64_t _internal_game_id() const;
  void _internal_set_game_id(int64_t value);
  public:

  // int64 player_id = 2;
  void clear_player_id();
  int64_t player_id() const;
  void set_player_id(int64_t value);
  private:
  int64_t _internal_player_id() const;
  void _internal_set_player_id(int64_t value);
  public:

  // uint32 x = 3;
  void clear_x();
  uint32_t x() const;
  void set_x(uint32_t value);
  private:
  uint32_t _internal_x() const;
  void _internal_set_x(uint32_t value);
  public:

  // uint32 y = 4;
  void clear_y();
  uint32_t y() const;
  void set_y(uint32_t value);
  private:
  uint32_t _internal_y() const;
  void _internal_set_y(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.GameMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t game_id_;
    int64_t player_id_;
    uint32_t x_;
    uint32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// -------------------------------------------------------------------

class GameMoveResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.GameMoveResponse) */ {
 public:
  inline GameMoveResponse() : GameMoveResponse(nullptr) {}
  ~GameMoveResponse() override;
  explicit PROTOBUF_CONSTEXPR GameMoveResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameMoveResponse(const GameMoveResponse& from);
  GameMoveResponse(GameMoveResponse&& from) noexcept
    : GameMoveResponse() {
    *this = ::std::move(from);
  }

  inline GameMoveResponse& operator=(const GameMoveResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameMoveResponse& operator=(GameMoveResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameMoveResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameMoveResponse* internal_default_instance() {
    return reinterpret_cast<const GameMoveResponse*>(
               &_GameMoveResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameMoveResponse& a, GameMoveResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GameMoveResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameMoveResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameMoveResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameMoveResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameMoveResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameMoveResponse& from) {
    GameMoveResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMoveResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.GameMoveResponse";
  }
  protected:
  explicit GameMoveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
    kGameIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string error = 3;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // int64 game_id = 1;
  void clear_game_id();
  int64_t game_id() const;
  void set_game_id(int64_t value);
  private:
  int64_t _internal_game_id() const;
  void _internal_set_game_id(int64_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.GameMoveResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int64_t game_id_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// -------------------------------------------------------------------

class GameEnded final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:reversi.GameEnded) */ {
 public:
  inline GameEnded() : GameEnded(nullptr) {}
  ~GameEnded() override;
  explicit PROTOBUF_CONSTEXPR GameEnded(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameEnded(const GameEnded& from);
  GameEnded(GameEnded&& from) noexcept
    : GameEnded() {
    *this = ::std::move(from);
  }

  inline GameEnded& operator=(const GameEnded& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEnded& operator=(GameEnded&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameEnded& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameEnded* internal_default_instance() {
    return reinterpret_cast<const GameEnded*>(
               &_GameEnded_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GameEnded& a, GameEnded& b) {
    a.Swap(&b);
  }
  inline void Swap(GameEnded* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEnded* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameEnded* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameEnded>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameEnded& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameEnded& from) {
    GameEnded::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEnded* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "reversi.GameEnded";
  }
  protected:
  explicit GameEnded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecialReasonFieldNumber = 3,
    kGameIdFieldNumber = 1,
    kWinnerFieldNumber = 2,
  };
  // optional string special_reason = 3;
  bool has_special_reason() const;
  private:
  bool _internal_has_special_reason() const;
  public:
  void clear_special_reason();
  const std::string& special_reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_special_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_special_reason();
  PROTOBUF_NODISCARD std::string* release_special_reason();
  void set_allocated_special_reason(std::string* special_reason);
  private:
  const std::string& _internal_special_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_special_reason(const std::string& value);
  std::string* _internal_mutable_special_reason();
  public:

  // int64 game_id = 1;
  void clear_game_id();
  int64_t game_id() const;
  void set_game_id(int64_t value);
  private:
  int64_t _internal_game_id() const;
  void _internal_set_game_id(int64_t value);
  public:

  // .reversi.Color winner = 2;
  void clear_winner();
  ::reversi::Color winner() const;
  void set_winner(::reversi::Color value);
  private:
  ::reversi::Color _internal_winner() const;
  void _internal_set_winner(::reversi::Color value);
  public:

  // @@protoc_insertion_point(class_scope:reversi.GameEnded)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr special_reason_;
    int64_t game_id_;
    int winner_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_reversi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Heartbeat

// int64 player_id = 1;
inline void Heartbeat::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
}
inline int64_t Heartbeat::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t Heartbeat::player_id() const {
  // @@protoc_insertion_point(field_get:reversi.Heartbeat.player_id)
  return _internal_player_id();
}
inline void Heartbeat::_internal_set_player_id(int64_t value) {
  
  _impl_.player_id_ = value;
}
inline void Heartbeat::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:reversi.Heartbeat.player_id)
}

// -------------------------------------------------------------------

// Connected

// int64 player_id = 1;
inline void Connected::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
}
inline int64_t Connected::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t Connected::player_id() const {
  // @@protoc_insertion_point(field_get:reversi.Connected.player_id)
  return _internal_player_id();
}
inline void Connected::_internal_set_player_id(int64_t value) {
  
  _impl_.player_id_ = value;
}
inline void Connected::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:reversi.Connected.player_id)
}

// -------------------------------------------------------------------

// CreateGame

// string player_name = 1;
inline void CreateGame::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& CreateGame::player_name() const {
  // @@protoc_insertion_point(field_get:reversi.CreateGame.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateGame::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reversi.CreateGame.player_name)
}
inline std::string* CreateGame::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:reversi.CreateGame.player_name)
  return _s;
}
inline const std::string& CreateGame::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void CreateGame::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateGame::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateGame::release_player_name() {
  // @@protoc_insertion_point(field_release:reversi.CreateGame.player_name)
  return _impl_.player_name_.Release();
}
inline void CreateGame::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reversi.CreateGame.player_name)
}

// .reversi.Color color = 2;
inline void CreateGame::clear_color() {
  _impl_.color_ = 0;
}
inline ::reversi::Color CreateGame::_internal_color() const {
  return static_cast< ::reversi::Color >(_impl_.color_);
}
inline ::reversi::Color CreateGame::color() const {
  // @@protoc_insertion_point(field_get:reversi.CreateGame.color)
  return _internal_color();
}
inline void CreateGame::_internal_set_color(::reversi::Color value) {
  
  _impl_.color_ = value;
}
inline void CreateGame::set_color(::reversi::Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:reversi.CreateGame.color)
}

// -------------------------------------------------------------------

// CreateGameResponse

// int64 game_id = 1;
inline void CreateGameResponse::clear_game_id() {
  _impl_.game_id_ = int64_t{0};
}
inline int64_t CreateGameResponse::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int64_t CreateGameResponse::game_id() const {
  // @@protoc_insertion_point(field_get:reversi.CreateGameResponse.game_id)
  return _internal_game_id();
}
inline void CreateGameResponse::_internal_set_game_id(int64_t value) {
  
  _impl_.game_id_ = value;
}
inline void CreateGameResponse::set_game_id(int64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:reversi.CreateGameResponse.game_id)
}

// -------------------------------------------------------------------

// JoinGame

// string player_name = 1;
inline void JoinGame::clear_player_name() {
  _impl_.player_name_.ClearToEmpty();
}
inline const std::string& JoinGame::player_name() const {
  // @@protoc_insertion_point(field_get:reversi.JoinGame.player_name)
  return _internal_player_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinGame::set_player_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.player_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reversi.JoinGame.player_name)
}
inline std::string* JoinGame::mutable_player_name() {
  std::string* _s = _internal_mutable_player_name();
  // @@protoc_insertion_point(field_mutable:reversi.JoinGame.player_name)
  return _s;
}
inline const std::string& JoinGame::_internal_player_name() const {
  return _impl_.player_name_.Get();
}
inline void JoinGame::_internal_set_player_name(const std::string& value) {
  
  _impl_.player_name_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinGame::_internal_mutable_player_name() {
  
  return _impl_.player_name_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinGame::release_player_name() {
  // @@protoc_insertion_point(field_release:reversi.JoinGame.player_name)
  return _impl_.player_name_.Release();
}
inline void JoinGame::set_allocated_player_name(std::string* player_name) {
  if (player_name != nullptr) {
    
  } else {
    
  }
  _impl_.player_name_.SetAllocated(player_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.player_name_.IsDefault()) {
    _impl_.player_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reversi.JoinGame.player_name)
}

// int64 game_id = 2;
inline void JoinGame::clear_game_id() {
  _impl_.game_id_ = int64_t{0};
}
inline int64_t JoinGame::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int64_t JoinGame::game_id() const {
  // @@protoc_insertion_point(field_get:reversi.JoinGame.game_id)
  return _internal_game_id();
}
inline void JoinGame::_internal_set_game_id(int64_t value) {
  
  _impl_.game_id_ = value;
}
inline void JoinGame::set_game_id(int64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:reversi.JoinGame.game_id)
}

// -------------------------------------------------------------------

// JoinGameResponse

// int64 game_id = 1;
inline void JoinGameResponse::clear_game_id() {
  _impl_.game_id_ = int64_t{0};
}
inline int64_t JoinGameResponse::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int64_t JoinGameResponse::game_id() const {
  // @@protoc_insertion_point(field_get:reversi.JoinGameResponse.game_id)
  return _internal_game_id();
}
inline void JoinGameResponse::_internal_set_game_id(int64_t value) {
  
  _impl_.game_id_ = value;
}
inline void JoinGameResponse::set_game_id(int64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:reversi.JoinGameResponse.game_id)
}

// .reversi.Color color = 2;
inline void JoinGameResponse::clear_color() {
  _impl_.color_ = 0;
}
inline ::reversi::Color JoinGameResponse::_internal_color() const {
  return static_cast< ::reversi::Color >(_impl_.color_);
}
inline ::reversi::Color JoinGameResponse::color() const {
  // @@protoc_insertion_point(field_get:reversi.JoinGameResponse.color)
  return _internal_color();
}
inline void JoinGameResponse::_internal_set_color(::reversi::Color value) {
  
  _impl_.color_ = value;
}
inline void JoinGameResponse::set_color(::reversi::Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:reversi.JoinGameResponse.color)
}

// -------------------------------------------------------------------

// LeaveGame

// int64 game_id = 1;
inline void LeaveGame::clear_game_id() {
  _impl_.game_id_ = int64_t{0};
}
inline int64_t LeaveGame::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int64_t LeaveGame::game_id() const {
  // @@protoc_insertion_point(field_get:reversi.LeaveGame.game_id)
  return _internal_game_id();
}
inline void LeaveGame::_internal_set_game_id(int64_t value) {
  
  _impl_.game_id_ = value;
}
inline void LeaveGame::set_game_id(int64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:reversi.LeaveGame.game_id)
}

// int64 player_id = 2;
inline void LeaveGame::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
}
inline int64_t LeaveGame::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t LeaveGame::player_id() const {
  // @@protoc_insertion_point(field_get:reversi.LeaveGame.player_id)
  return _internal_player_id();
}
inline void LeaveGame::_internal_set_player_id(int64_t value) {
  
  _impl_.player_id_ = value;
}
inline void LeaveGame::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:reversi.LeaveGame.player_id)
}

// -------------------------------------------------------------------

// GameMove

// int64 game_id = 1;
inline void GameMove::clear_game_id() {
  _impl_.game_id_ = int64_t{0};
}
inline int64_t GameMove::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int64_t GameMove::game_id() const {
  // @@protoc_insertion_point(field_get:reversi.GameMove.game_id)
  return _internal_game_id();
}
inline void GameMove::_internal_set_game_id(int64_t value) {
  
  _impl_.game_id_ = value;
}
inline void GameMove::set_game_id(int64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:reversi.GameMove.game_id)
}

// int64 player_id = 2;
inline void GameMove::clear_player_id() {
  _impl_.player_id_ = int64_t{0};
}
inline int64_t GameMove::_internal_player_id() const {
  return _impl_.player_id_;
}
inline int64_t GameMove::player_id() const {
  // @@protoc_insertion_point(field_get:reversi.GameMove.player_id)
  return _internal_player_id();
}
inline void GameMove::_internal_set_player_id(int64_t value) {
  
  _impl_.player_id_ = value;
}
inline void GameMove::set_player_id(int64_t value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:reversi.GameMove.player_id)
}

// uint32 x = 3;
inline void GameMove::clear_x() {
  _impl_.x_ = 0u;
}
inline uint32_t GameMove::_internal_x() const {
  return _impl_.x_;
}
inline uint32_t GameMove::x() const {
  // @@protoc_insertion_point(field_get:reversi.GameMove.x)
  return _internal_x();
}
inline void GameMove::_internal_set_x(uint32_t value) {
  
  _impl_.x_ = value;
}
inline void GameMove::set_x(uint32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:reversi.GameMove.x)
}

// uint32 y = 4;
inline void GameMove::clear_y() {
  _impl_.y_ = 0u;
}
inline uint32_t GameMove::_internal_y() const {
  return _impl_.y_;
}
inline uint32_t GameMove::y() const {
  // @@protoc_insertion_point(field_get:reversi.GameMove.y)
  return _internal_y();
}
inline void GameMove::_internal_set_y(uint32_t value) {
  
  _impl_.y_ = value;
}
inline void GameMove::set_y(uint32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:reversi.GameMove.y)
}

// -------------------------------------------------------------------

// GameMoveResponse

// int64 game_id = 1;
inline void GameMoveResponse::clear_game_id() {
  _impl_.game_id_ = int64_t{0};
}
inline int64_t GameMoveResponse::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int64_t GameMoveResponse::game_id() const {
  // @@protoc_insertion_point(field_get:reversi.GameMoveResponse.game_id)
  return _internal_game_id();
}
inline void GameMoveResponse::_internal_set_game_id(int64_t value) {
  
  _impl_.game_id_ = value;
}
inline void GameMoveResponse::set_game_id(int64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:reversi.GameMoveResponse.game_id)
}

// bool success = 2;
inline void GameMoveResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool GameMoveResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool GameMoveResponse::success() const {
  // @@protoc_insertion_point(field_get:reversi.GameMoveResponse.success)
  return _internal_success();
}
inline void GameMoveResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void GameMoveResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:reversi.GameMoveResponse.success)
}

// string error = 3;
inline void GameMoveResponse::clear_error() {
  _impl_.error_.ClearToEmpty();
}
inline const std::string& GameMoveResponse::error() const {
  // @@protoc_insertion_point(field_get:reversi.GameMoveResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameMoveResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reversi.GameMoveResponse.error)
}
inline std::string* GameMoveResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:reversi.GameMoveResponse.error)
  return _s;
}
inline const std::string& GameMoveResponse::_internal_error() const {
  return _impl_.error_.Get();
}
inline void GameMoveResponse::_internal_set_error(const std::string& value) {
  
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* GameMoveResponse::_internal_mutable_error() {
  
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* GameMoveResponse::release_error() {
  // @@protoc_insertion_point(field_release:reversi.GameMoveResponse.error)
  return _impl_.error_.Release();
}
inline void GameMoveResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reversi.GameMoveResponse.error)
}

// -------------------------------------------------------------------

// GameEnded

// int64 game_id = 1;
inline void GameEnded::clear_game_id() {
  _impl_.game_id_ = int64_t{0};
}
inline int64_t GameEnded::_internal_game_id() const {
  return _impl_.game_id_;
}
inline int64_t GameEnded::game_id() const {
  // @@protoc_insertion_point(field_get:reversi.GameEnded.game_id)
  return _internal_game_id();
}
inline void GameEnded::_internal_set_game_id(int64_t value) {
  
  _impl_.game_id_ = value;
}
inline void GameEnded::set_game_id(int64_t value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:reversi.GameEnded.game_id)
}

// .reversi.Color winner = 2;
inline void GameEnded::clear_winner() {
  _impl_.winner_ = 0;
}
inline ::reversi::Color GameEnded::_internal_winner() const {
  return static_cast< ::reversi::Color >(_impl_.winner_);
}
inline ::reversi::Color GameEnded::winner() const {
  // @@protoc_insertion_point(field_get:reversi.GameEnded.winner)
  return _internal_winner();
}
inline void GameEnded::_internal_set_winner(::reversi::Color value) {
  
  _impl_.winner_ = value;
}
inline void GameEnded::set_winner(::reversi::Color value) {
  _internal_set_winner(value);
  // @@protoc_insertion_point(field_set:reversi.GameEnded.winner)
}

// optional string special_reason = 3;
inline bool GameEnded::_internal_has_special_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GameEnded::has_special_reason() const {
  return _internal_has_special_reason();
}
inline void GameEnded::clear_special_reason() {
  _impl_.special_reason_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GameEnded::special_reason() const {
  // @@protoc_insertion_point(field_get:reversi.GameEnded.special_reason)
  return _internal_special_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameEnded::set_special_reason(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.special_reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:reversi.GameEnded.special_reason)
}
inline std::string* GameEnded::mutable_special_reason() {
  std::string* _s = _internal_mutable_special_reason();
  // @@protoc_insertion_point(field_mutable:reversi.GameEnded.special_reason)
  return _s;
}
inline const std::string& GameEnded::_internal_special_reason() const {
  return _impl_.special_reason_.Get();
}
inline void GameEnded::_internal_set_special_reason(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.special_reason_.Set(value, GetArenaForAllocation());
}
inline std::string* GameEnded::_internal_mutable_special_reason() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.special_reason_.Mutable(GetArenaForAllocation());
}
inline std::string* GameEnded::release_special_reason() {
  // @@protoc_insertion_point(field_release:reversi.GameEnded.special_reason)
  if (!_internal_has_special_reason()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.special_reason_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.special_reason_.IsDefault()) {
    _impl_.special_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GameEnded::set_allocated_special_reason(std::string* special_reason) {
  if (special_reason != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.special_reason_.SetAllocated(special_reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.special_reason_.IsDefault()) {
    _impl_.special_reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:reversi.GameEnded.special_reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace reversi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::reversi::Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::reversi::Color>() {
  return ::reversi::Color_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_reversi_2eproto
